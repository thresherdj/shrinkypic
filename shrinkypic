#!/usr/bin/python
# -*- coding: utf-8 -*-

#    Copyright 2014, Dennis Drescher
#    All rights reserved.
#
#    This library is free software; you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published
#    by the Free Software Foundation; either version 2.1 of License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should also have received a copy of the GNU Lesser General Public
#    License along with this library in the file named "LICENSE".
#    If not, write to the Free Software Foundation, 51 Franklin Street,
#    suite 500, Boston, MA 02110-1335, USA or visit their web page on the 
#    internet at http://www.fsf.org/licenses/lgpl.html.

# Import modules
import sys, os, argparse
from PySide                         import QtGui
from PySide.QtGui                   import QDialog, QMessageBox, QApplication
from shrinkypic.dialog              import main
from shrinkypic.process             import im_process
from shrinkypic.icon.pyresources    import qInitResources, qCleanupResources

# Set some global vars
systemName                          = 'ShrinkyPic'
systemVersion                       = '0.1.r26'


class ShrinkyPicMainForm (QDialog, main.Ui_MainWindow) :

    def __init__ (self, parent=None) :
        '''Initialize and start up the UI'''

        super(ShrinkyPicMainForm, self).__init__(parent)
        # Init app resources
        qInitResources()
        appicon = QtGui.QIcon(':/shrinkypic_256.png')
        appicon.addFile(':/shrinkypic_96.png')
        appicon.addFile(':/shrinkypic_48.png')
        appicon.addFile(':/shrinkypic_32.png')
        appicon.addFile(':/shrinkypic_16.png')
        appicon.addFile(':/shrinkypic.svg')

        self.setWindowIcon(appicon)
        self.imProcess = im_process.ImProcess()
        self.setupUi(self)
        self.connectionActions()


    def main (self) :
        '''This function shows the main dialog'''

        self.show()

    def connectionActions (self) :
        '''Connect to form buttons.'''

        self.OkButton.clicked.connect(self.okClicked)
        self.GetPictureButton.clicked.connect(self.getPictureFile)

    def okClicked (self) :
        '''Execute the OK button.'''

        view                    = self.ViewCheckBox.isChecked()
        outline                 = self.OutlineCheckBox.isChecked()
        inFile                  = self.FileNameEdit.text()
        caption                 = self.CaptionEdit.text()
        size                    = self.SizeSelect.currentText()
        rotate                  = self.RotationBox.text()
        outFile                 = getOutfileName(inFile, size, str(rotate))

        if os.path.exists(inFile) and os.path.splitext(inFile)[1].lower() in ['.jpg', '.png'] :
            # Call the main class to do the work with the data we collected
            self.imProcess.processPicFile(inFile, outFile, rotate, size, caption, outline, view)
        else :
            QMessageBox.warning(self, "Warning", 'Not valid intput file: ' + inFile)


    def getPictureFile (self) :
        '''Call a basic find file widget to get the file we want to process.'''

        fileName = None
        dialog = QtGui.QFileDialog(self, "Find a Picture")
        dialog.setViewMode(QtGui.QFileDialog.Detail)
        dialog.setAcceptMode(QtGui.QFileDialog.AcceptOpen)
        dialog.setFileMode(QtGui.QFileDialog.ExistingFile)
        if dialog.exec_():
            fileName = dialog.selectedFiles()[0]

        # When the file is found, change the FileNameEdit text
        self.FileNameEdit.setText(fileName)


# Global functions

def getOutfileName (inFile, size, rotate) :

    (path, ext)             = os.path.splitext(inFile)
    (thisDir, fileName)     = os.path.split(path)

    return os.path.join(thisDir, fileName + '-' + size.capitalize() + '_' + str(rotate) + '.jpg')

###############################################################################
############################### Argparser Setup ###############################
###############################################################################

# The argument handler
def processUserArguments (args) :
    '''Process incoming command arguments.'''

    # Give a welcome message
    print '\n\t\tWelcome to ' + systemName
    print '\n\t\tVersion ' + systemVersion + '\n'

    inFile      = args.filename
    rotate      = args.rotate
    size        = args.size
    caption     = args.caption
    outline     = args.outline
    view        = True
    outFile     = getOutfileName(inFile, size, rotate)

    im_process.ImProcess().processPicFile(inFile, outFile, rotate, size, caption, outline, view)


# Script starts running from here
if __name__ == '__main__' :

    # Setup the arg parser
    parser = argparse.ArgumentParser(description=systemName)

    # Argument choices
    trueFalse   = ['True', 'true', 'False', 'false']
    sizes       = ['small', 'Small', 'medium', 'Medium', 'large', 'Large']

    # Add main arguments (first postion options)
    parser.add_argument('filename', help='The file to process (a positional argument required for all actions with this process)')
    parser.add_argument('-c', '--caption', default='', help='A caption to add to the output files.')
    parser.add_argument('-r', '--rotate', default=0, help='Degrees to rotate the output. Default is none.')
    parser.add_argument('-s', '--size', default='small', choices=sizes, help='Size of the output, small, medium, or large.')
    parser.add_argument('-o', '--outline', default=True, choices=trueFalse, help='Add a thin outline around the base picture.')

    app = QApplication(sys.argv)
    if len(sys.argv) == 1 :
        window = ShrinkyPicMainForm()
        window.main()
        sys.exit(app.exec_())
    else :
        # Send the collected arguments to the handler
        processUserArguments(parser.parse_args())





